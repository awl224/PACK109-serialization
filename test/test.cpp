#include <stdexcept>
#include<vector>
#include<stdio.h>
#include<stdlib.h>
#include"pack109.hpp"

using namespace std;

template <class T>
int test(const char* label, T lhs, T rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%x\n", lhs);
    printf("  rhs=%x\n", rhs);
    exit(1);
  }
}

template <class T>
  int testfloat(const char* label, T lhs, T rhs) {
    printf("%s: ", label);
    if (lhs==rhs) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf("  lhs=%f\n", lhs);
      printf("  rhs=%f\n", rhs);
      exit(1);
    }
}
int testString(const char* label, string lhs, string rhs){
    printf("%s: ", label);
    if (lhs==rhs) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf("  lhs=%s\n", lhs.c_str());
      printf("  rhs=%s\n", rhs.c_str());
      exit(1);
    }
}
int testvectoru64(const char* label, std::vector<u64> lhs, std::vector<u64> rhs) {
    printf("%s: ", label);
    if (lhs==rhs) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf(" lhs="); pack109::printVectoru64(lhs); printf("\n");
      printf(" rhs="); pack109::printVectoru64(rhs); printf("\n");
      exit(1);
    }
  }
  int testvectorf64(const char* label, std::vector<f64> lhs, std::vector<f64> rhs) {
    printf("%s: ", label);
    if (lhs==rhs) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf(" lhs="); pack109::printVectorf64(lhs); printf("\n");
      printf(" rhs="); pack109::printVectorf64(rhs); printf("\n");
      exit(1);
    }
  }

  int testvectorstring(const char* label, std::vector<string> lhs, std::vector<string> rhs) {
    printf("%s: ", label);
    if (lhs==rhs) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf(" lhs="); pack109::printVectorString(lhs); printf("\n");
      printf(" rhs="); pack109::printVectorString(rhs); printf("\n");
      exit(1);
    }
  }
int testPerson(const char* label, Person lhs, Person rhs) {
    printf("%s: ", label);
    if (lhs.age==rhs.age && lhs.height==rhs.height && lhs.name==rhs.name) {
      printf("Passed\n");
      return 1;
    } else {
      printf("Failed\n");
      printf(" lhs="); pack109::printPerson(lhs); printf("\n");
      printf(" rhs="); pack109::printPerson(rhs); printf("\n");
      exit(1);
    }
  }
int testvec(const char* label, vec lhs, vec rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs="); pack109::printVec(lhs); printf("\n");
    printf("  rhs="); pack109::printVec(rhs); printf("\n");
    exit(1);
  }
}

int main() {

  // Test bool

  // True
  vec v1{0xa0};
  vec bytes1 = pack109::serialize(true);
  testvec("Test 1 - true ser", bytes1, v1);

  bool bool_true = pack109::deserialize_bool(bytes1);
  test("Test 2 - true de", bool_true, true);
 

  // False
  vec v2{0xa1};
  vec bytes2 = pack109::serialize(false);
  testvec("Test 3 - false ser", bytes2, v2);

  bool bool_false = pack109::deserialize_bool(bytes2); 
  test("Test 4 - false de", bool_false, false);

  // Test Integers

  // u8
  u8 item1 = 0x42;
  vec v3{0xa2, 0x42};
  vec bytes3 = pack109::serialize(item1);
  testvec("Test 5 - u8 ser", bytes3, v3);
  
  u8 int_u8 = pack109::deserialize_u8(bytes3);  
  test("Test 6 - u8 de", int_u8, item1);

  // u32
  u32 itemu32 = 0x11223344;
  vec vu32{0xa3,0x11,0x22,0x33,0x44};
  vec bytesu32 = pack109::serialize(itemu32);
  testvec("Test 7 - u32 ser", bytesu32, vu32);

  u32 int_u32 = pack109::deserialize_u32(bytesu32);  
  test("Test 8 - u32 de", int_u32, itemu32);
  // u64
  u64 itemu64 = 0x1122334455667788;
  vec vu64{0xa4,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88};
  vec bytesu64 = pack109::serialize(itemu64);
  testvec("Test 9 - u64 ser", bytesu64, vu64);

  u64 int_u64 = pack109::deserialize_u64(bytesu64);  
  test("Test 10 - u64 de", int_u64, itemu64);
  // i8
  i8 itemi8 = 0x42;
  vec vi8{0xa5, 0x42};
  vec bytesi8 = pack109::serialize(itemi8);
  testvec("Test 11 - i8 ser", bytesi8, vi8);

  i8 int_i8 = pack109::deserialize_i8(bytesi8);
  test("Test 12 - i8 de", int_i8, itemi8);

  // i32
  i32 itemi32 = 0x11223344;
  vec vi32{0xa6, 0x11, 0x22, 0x33, 0x44};
  vec bytesi32 = pack109::serialize(itemi32);
  testvec("Test 13 - i32 ser", bytesi32, vi32);

  i32 int_i32 = pack109::deserialize_i32(bytesi32);
  test("Test 14 - i32 de", int_i32, itemi32);
  // i64
  i64 itemi64 = 0x1122334455667788;
  vec vi64{0xa7, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
  vec bytesi64 = pack109::serialize(itemi64);
  testvec("Test 15 - i64 ser", bytesi64, vi64);

  i64 int_i64 = pack109::deserialize_i64(bytesi64);
  test("Test 16 - i64 de", int_i64, itemi64);

  // Test Float
  
  // f32
  f32 itemf32 = 4343.3; 
  vec vf32{0xa8,0x45,0x87,0xba,0x66};
  vec bytesf32 = pack109::serialize(itemf32);
  testvec("Test 17 - f32 ser", bytesf32, vf32);

  f32 int_f32 = pack109::deserialize_f32(bytesf32);
  testfloat("Test 18 - f32 de", int_f32, itemf32);
  // f64
  f64 itemf64 = 4343.22;
  vec vf64{0xa9,0x40,0xb0,0xf7,0x38,0x51,0xeb,0x85,0x1f};
  vec bytesf64 = pack109::serialize(itemf64);
  testvec("Test 19 - f64 ser", bytesf64, vf64);

  f64 int_f64 = pack109::deserialize_f64(bytesf64);
  testfloat("Test 20 - f64 de", int_f64, itemf64);
  // Test Strings
  
  // s8
  string items8 = "hello world";
  vec vs8{0xaa,0x0b,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64};
  vec bytess8 = pack109::serialize(items8);
  testvec("Test 21 - s8 ser",bytess8, vs8);

  string string_s8 = pack109::deserialize_string(bytess8);
  testString("Test 22 - s8 de",string_s8, items8);
  // s16
  string items16 = "hello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello worldhello world";
  vec vs16{0xab,0x01,0x1e,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64,0x68,0x65,0x6c,0x6c,0x6f,0x20,0x77,0x6f,0x72,0x6c,0x64};
  vec bytess16 = pack109::serialize(items16);
  testvec("Test 23 - s16 ser",bytess16, vs16);

  string string_s16 = pack109::deserialize_string(bytess16);
  testString("Test 24 - s16 de",string_s16, items16);
  // Test Arrays


  // a8
  std::vector<u8> itema8u8 = {0x11,0x22,0x33,0x44};
  vec va8u8{0xac,0x04,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44};
  vec bytesa8u8 = pack109::serialize(itema8u8);
  testvec("test 25 - a8<u8> ser",bytesa8u8, va8u8);

  std::vector<u8> array_a8u8 = pack109::deserialize_vec_u8(bytesa8u8);
  testvec("test 26 - a8<u8> de",array_a8u8, itema8u8);

  std::vector<u64> itema8u64{0x1122334455667788,0x8877665544332211,0x2211443366558877,0x7788556633441122};
  vec va8u64{0xac,0x04,0xa4,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0xa4,0x88,0x77,0x66,0x55,0x44,0x33,0x22,0x11,0xa4,0x22,0x11,0x44,0x33,0x66,0x55,0x88,0x77,0xa4,0x77,0x88,0x55,0x66,0x33,0x44,0x11,0x22};
  vec bytesa8u64 = pack109::serialize(itema8u64);
  testvec("test 27 - a8<u64> ser",bytesa8u64, va8u64);

  std::vector<u64> array_a8u64 = pack109::deserialize_vec_u64(bytesa8u64);
  testvectoru64("test 28 - a8<u64> de",array_a8u64, itema8u64);

  std::vector<f64> itema8f64{(double)0x1122334455667788,(double)0x8877665544332211,(double)0x2211443366558877,(double)0x7788556633441122};
  vec va8f64{0xac,0x04,0xa9,0x11,0x22,0x33,0x44,0x55,0x66,0x78,0x00,0xa9,0x88,0x77,0x66,0x55,0x44,0x33,0x20,0x00,0xa9,0x22,0x11,0x44,0x33,0x66,0x55,0x88,0x00,0xa9,0x77,0x88,0x55,0x66,0x33,0x44,0x10,0x00};
  vec bytesa8f64 = pack109::serialize(itema8f64);
  testvec("test 29 - a8<f64> ser",bytesa8f64, va8f64);

  std::vector<f64> array_a8f64 = pack109::deserialize_vec_f64(bytesa8f64);
  testvectorf64("test 30 - a8<f64> de",array_a8f64, itema8f64);

  std::vector<string> itema8string{"stringOne","stringTwo"};
  vec va8string{0xac,0x02,0xaa,0x73,0x74,0x72,0x69,0x6e,0x67,0x4f,0x6e,0x65,0xaa,0x73,0x74,0x72,0x69,0x6e,0x67,0x54,0x77,0x6f};
  vec bytesa8string = pack109::serialize(itema8string);
  testvec("test 31 - a8<string> ser",bytesa8string, va8string);

  std::vector<string> array_a8string = pack109::deserialize_vec_string(bytesa8string);
  testvectorstring("test 32 - a8<string> de",array_a8string, itema8string);
  // a16
  std::vector<u8> itema16u8 = {0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44,0x11,0x22,0x33,0x44};
  vec va16u8{0xad,0x01,0x20,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44,0xa2,0x11,0xa2,0x22,0xa2,0x33,0xa2,0x44};
  vec bytesa16u8 = pack109::serialize(itema16u8);
  testvec("test 33 - a16<u8> ser",bytesa16u8, va16u8);

  std::vector<u8> array_a16u8 = pack109::deserialize_vec_u8(bytesa16u8);
  testvec("test 34 - a16<u8> de",array_a16u8, itema16u8);
  // Test Maps

  // m8
  struct Person myPerson = {.age = 10, .height = 3.4, .name = "Ann"};
  vec vm8person{0xae,0x01,0xaa,0x06,0x50,0x65,0x72,0x73,0x6f,0x6e,0xae,0x03,0xaa,0x03,0x61,0x67,0x65,0xa2,0x0a,0xaa,0x06,0x68,0x65,0x69,0x67,0x68,0x74,0xa8,0x40,0x59,0x99,0x9a,0xaa,0x04,0x6d,0x61,0x6d,0x65,0xaa,0x03,0x41,0x6e,0x6e};
  vec bytesm8person = pack109::serialize(myPerson);
  testvec("test 33 - m8Person ser",bytesm8person, vm8person);

  f32 valtest = myPerson.height;
  struct Person person_m8Person = pack109::deserialize_person(bytesm8person);
  testPerson("test 34 - m8Person de",person_m8Person, myPerson);
  // m16 

  return 0;
}